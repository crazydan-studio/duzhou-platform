<?xml version="1.0" encoding="UTF-8" ?>
<biz xmlns:x="/nop/schema/xdsl.xdef" xmlns:c="c"
     xmlns:app-modeler="app-modeler" xmlns:xpl="xpl"
     x:schema="/nop/schema/biz/xbiz.xdef"
     x:extends="_DevAppModule.xbiz">

    <actions>
        <mutation name="release" displayName="发布">
            <arg name="id" type="String" />
            <arg name="forceOverride" type="Boolean" mandatory="false" />
            <arg name="releaseDir" type="String" />
            <arg name="svcCtx" kind="ServiceContext" />

            <source>
                <c:script><![CDATA[
                    import io.nop.commons.util.FileHelper;
                    import io.nop.codegen.XCodeGenerator;
                    import io.nop.xlang.api.XLang;
                    import java.io.File;
                    import java.lang.Boolean;
                    import io.nop.core.resource.impl.FileResource;
                    import io.crazydan.duzhou.platform.app_modeler.biz.DevAppModuleBizModel;

                    // Note：其与对应的 BizModel 是独立的，要调用 BizModel 中的方法，需注入该模型。
                    // 在 BizModel 内标注了 @BizAction 的函数可以通过
                    // `thisObj.invoke('batchGet',{ids},null, svcCtx)` 方式调用
                    // io.nop.xlang.functions.GlobalFunctions#inject
                    const biz = inject(DevAppModuleBizModel);

                    const module = biz.dao().getEntityById(id);
                    biz.dao().batchLoadPropsForEntity(module,
                                                  'app.domains,app.dicts,app.config'
                                                  + ',entities.columns,entities.relations'
                                                  + ',entities.relations.target');

                    FileHelper.assureParent(new File(releaseDir + '/any'));

                    const gen = new XCodeGenerator('/duzhou/templates/app-modeler', releaseDir);
                    gen.forceOverride(Boolean.TRUE.equals(forceOverride));

                    const scope = XLang.newEvalScope();
                    scope.setLocalValue('module', module);

                    gen.execute('/', scope);

                    // 变量 ormModelFilePath 由代码生成脚本复制
                    const ormModelFilePath = scope.getLocalValue('ormModelFilePath');
                    const ormModelResource = new FileResource(new File(ormModelFilePath));

                    return biz.genOrmDbDdl(ormModelResource);
                ]]></c:script>
            </source>
        </mutation>

        <mutation name="upgradeDb" displayName="升级数据库">
            <arg name="ddlList" type="List&lt;String>" />
            <arg name="svcCtx" kind="ServiceContext" />

            <source>
                <c:script><![CDATA[
                    import io.crazydan.duzhou.platform.app_modeler.biz.DevAppModuleBizModel;

                    const biz = inject(DevAppModuleBizModel);

                    return biz.executeDdlList(ddlList);
                ]]></c:script>
            </source>
        </mutation>

        <query name="discover" displayName="发现内置的应用模块">
            <source>
                <c:script><![CDATA[
                    import io.nop.core.module.ModuleManager;
                    import io.nop.core.resource.component.ResourceComponentManager;

                    return ModuleManager.instance()
                                .getAllModuleResources('orm/app.orm.xml')
                                .map(resource => {
                                    const ormModelPath = resource.getPath();
                                    const ormModel = ResourceComponentManager.instance().parseComponentModel(resource);
                                    const ormCode = ormModel['ext:moduleCode2'];

                                    return {
                                        value: ormModelPath,
                                        code: ormCode,
                                        label: ormModel['ext:moduleDisplayName']
                                                    + ' (' + ormCode + '): ' + ormModelPath,
                                    };
                                })
                                // TODO 暂时不支持 Nop 原生模块，需要先确定对基础模块的定制方案
                                .filter(module => !!module.code);
                ]]></c:script>
            </source>
        </query>

        <mutation name="importDiscovery" displayName="导入发现的应用模块">
            <arg name="appId" type="String" />
            <arg name="ormModelPaths" type="Set&lt;String>" />
            <arg name="svcCtx" kind="ServiceContext" />

            <source>
                <c:script><![CDATA[
                    import io.nop.core.resource.component.ResourceComponentManager;
                    import io.crazydan.duzhou.platform.app_modeler.biz.DevAppModuleBizModel;
                    import io.crazydan.duzhou.platform.app_modeler.biz.DevAppBizModel;
                    import io.crazydan.duzhou.platform.app_modeler.orm.entity.DevAppModule;
                    import io.crazydan.duzhou.platform.app_modeler.orm.entity.DevApp;
                    import io.nop.biz.BizConstants;
                    import io.crazydan.duzhou.platform.app_modeler.biz.AppModelerBizErrors;
                    import io.nop.api.core.beans.ApiResponse;

                    const appBiz = inject(DevAppBizModel);
                    const moduleBiz = inject(DevAppModuleBizModel);

                    const devApp = appBiz.dao().getEntityById(appId);
                    if (!devApp) { throwError(AppModelerBizErrors.Err_DevAppModule_No_App_Exist); }

                    const devAppModules = [];
                ]]></c:script>
                <c:for var="ormModelPath" items="${ormModelPaths}">
                    <c:script><![CDATA[
                        const ormModel = ResourceComponentManager.instance().loadComponentModel(ormModelPath);
                        if (!ormModel) { continue; }

                        let devAppModule = new DevAppModule();
                        devAppModule.appId = appId;
                        devAppModule.code = ormModel['ext:moduleCode2'];

                        devAppModule = moduleBiz.dao().findFirstByExample(devAppModule);

                        if (!devAppModule) {
                            devAppModule = moduleBiz.dao().newEntity();
                        } else {
                            moduleBiz.dao().batchLoadPropsForEntity(devAppModule,
                                                      'entities.columns,entities.relations'
                                                      + ',entities.relations.target');
                        }
                    ]]></c:script>
                    <app-modeler:PatchDevAppModule
                            devApp="${devApp}" devAppModule="${devAppModule}" ormModel="${ormModel}"
                            xpl:lib="/duzhou/xlib/app-modeler.xlib" />

                    <c:script><![CDATA[
                        devAppModule.app = devApp;

                        moduleBiz.checkDataAuth(BizConstants.METHOD_SAVE, devAppModule, svcCtx);

                        moduleBiz.dao().saveOrUpdateEntity(devAppModule);

                        devAppModules.add(devAppModule);
                    ]]></c:script>
                </c:for>

                <c:script><![CDATA[
                    appBiz.checkDataAuth(BizConstants.METHOD_SAVE, devApp, svcCtx);

                    appBiz.dao().saveOrUpdateEntity(devApp);

                    return ApiResponse.buildSuccess(devAppModules.map(module => ({
                        code: module.code,
                        displayName: module.displayName,
                    })));
                ]]></c:script>
            </source>
        </mutation>
    </actions>
</biz>
