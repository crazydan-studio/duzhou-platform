<?xml version="1.0" encoding="UTF-8" ?>
<!--
  - 渡舟平台 - 致力于构建自运维、自监控、可演化的全功能型应用平台
  - Copyright (C) 2024 Crazydan Studio <https://studio.crazydan.org>
  -
  - This program is free software: you can redistribute it and/or modify
  - it under the terms of the GNU Lesser General Public License as published by
  - the Free Software Foundation, either version 3 of the License, or
  - (at your option) any later version.
  -
  - This program is distributed in the hope that it will be useful,
  - but WITHOUT ANY WARRANTY; without even the implied warranty of
  - MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  - GNU Lesser General Public License for more details.
  -
  - You should have received a copy of the GNU Lesser General Public License
  - along with this program.
  - If not, see <https://www.gnu.org/licenses/lgpl-3.0.en.html#license-text>.
  -->

<lib xmlns:x="/nop/schema/xdsl.xdef"
     xmlns:c="c" xmlns:thisLib="thisLib" xmlns:gen="gen" xmlns:xpl="xpl"
     x:schema="/nop/schema/xlib.xdef"
>
    <tags>
        <!-- 根据 io.nop.orm.model.OrmModel 补全 DevAppModule -->
        <PatchDevAppModule outputMode="none">
            <attr name="devApp" type="io.crazydan.duzhou.platform.app_modeler.orm.entity.DevApp" />
            <attr name="devAppModule" type="io.crazydan.duzhou.platform.app_modeler.orm.entity.DevAppModule" />
            <attr name="ormModel" type="io.nop.orm.model.OrmModel" />

            <source>
                <c:script><![CDATA[
                    devAppModule.code = ormModel['ext:moduleCode2'];
                    devAppModule.displayName = ormModel['ext:moduleDisplayName'] || ormModel['ext:appName'];
                    //devAppModule.description = ormModel['ext:moduleDescription'];
                    //devAppModule.webStarterType = ormModel['ext:webStarterType'];
                    //devAppModule.dbDialect = ormModel['ext:dialect'];
                ]]></c:script>
                <thisLib:_DoMergeOrmDicts devApp="${devApp}" ormModel="${ormModel}" />
                <thisLib:_DoMergeOrmDomains devApp="${devApp}" ormModel="${ormModel}" />
                <thisLib:_DoMergeOrmEntities devAppModule="${devAppModule}" ormModel="${ormModel}" />
            </source>
        </PatchDevAppModule>

        <!-- 根据 DevAppModule 生成 io.nop.orm.model.OrmModel -->
        <GenOrmModel outputMode="none">
            <attr name="devApp" />
            <attr name="devAppModule" />

            <source>
                <gen:GenOrmModelExtAttrs app="${devApp}" appModule="${devAppModule}"
                                         xpl:return="moduleExtAttrs"
                                         xpl:lib="/duzhou/codegen/xlib/gen.xlib" />
                <c:script><![CDATA[
                    const moduleCode2 = moduleExtAttrs['ext:moduleCode2'];
                    const registerShortName = moduleExtAttrs['ext:registerShortName'];
                    const moduleEntityPackageName = moduleExtAttrs['ext:entityPackageName'];

                    function getDictName(name) {
                        return name ? moduleCode2 + '/' + name : null;
                    }
                ]]></c:script>
                <thisLib:_DoGenOrmModel xdefPath="/nop/schema/orm/orm.xdef">
                    <orm xpl:attrs="moduleExtAttrs">
                        <domains>
                            <c:for var="domain" items="${devApp.domains}">
                                <c:script><![CDATA[
                                    const domainAttrs = {
                                        name: domain.name,
                                        displayName: domain.displayName,
                                        stdDomain: domain.stdDomain,
                                        stdSqlType: domain.stdSqlType,
                                        precision: domain.precision,
                                        scale: domain.scale,
                                    };
                                ]]></c:script>
                                <domain xpl:attrs="domainAttrs" />
                            </c:for>
                        </domains>
                        <dicts>
                            <c:for var="dict" items="${devApp.dicts}">
                                <c:script><![CDATA[
                                    const dictAttrs = {
                                        name: getDictName(dict.name),
                                        label: dict.displayName,
                                        valueType: dict.optionType,
                                    };
                                ]]></c:script>
                                <dict xpl:attrs="dictAttrs">
                                    <!--<description>${dict.description}</description>-->
                                    <c:for var="option" items="${dict.options}">
                                        <c:script><![CDATA[
                                            const optionAttrs = {
                                                code: option.code.replaceAll('-', '_'),
                                                label: option.label,
                                                value: option.value,
                                                description: option.description,
                                            };
                                        ]]></c:script>
                                        <option xpl:attrs="optionAttrs" />
                                    </c:for>
                                </dict>
                            </c:for>
                        </dicts>
                        <entities>
                            <c:for var="entity" items="${devAppModule.entities}">
                                <c:script><![CDATA[
                                    const name = entity.name || entity.tableName.$camelCase(true);
                                    const className = entity.name;//entity.className || entity.name;

                                    const entityAttrs = {
                                        registerShortName: registerShortName,
                                        tagSet: entity.tagSet,
                                        displayName: entity.displayName,
                                        tableName: entity.tableName,
                                        name: name.$fullClassName(moduleEntityPackageName),
                                        className: className.$fullClassName(moduleEntityPackageName),
                                        //'ext:baseClass': entity.baseClassName?.$fullClassName(moduleEntityPackageName),
                                        useGlobalCache: entity.tagSet?.contains('cache'),
                                        kvTable: entity.tagSet?.contains('kv-table'),
                                        notGenCode: entity.tagSet?.contains('not-gen')
                                                        || entity.tagSet?.contains('del'),
                                    };

                                    entity.columns?.forEach((col) => {
                                        const domain = col.domainName;
                                        const propName = col.name.$colCodeToPropName();

                                        if (domain == 'version') {
                                            entityAttrs.versionProp = propName;
                                        } else if (domain == 'createTime') {
                                            entityAttrs.createTimeProp = propName;
                                        } else if (domain == 'createdBy') {
                                            entityAttrs.createrProp = propName;
                                        } else if (domain == 'updateTime') {
                                            entityAttrs.updateTimeProp = propName;
                                        } else if (domain == 'updatedBy') {
                                            entityAttrs.updaterProp = propName;
                                        } else if (domain == 'delFlag') {
                                            entityAttrs.deleteFlagProp = propName;
                                            entityAttrs.useLogicalDelete = true;
                                        } else if (domain == 'tenant') {
                                            entityAttrs.tenantProp = propName;
                                            entityAttrs.useTenant = true;
                                        } else if (domain == 'shard') {
                                            entityAttrs.shardProp = propName;
                                            entityAttrs.useShard = true;
                                        }
                                    });
                                ]]></c:script>
                                <entity xpl:attrs="entityAttrs">
                                    <columns>
                                        <c:for var="column" items="${entity.columns}">
                                            <c:script><![CDATA[
                                                const columnAttrs = {
                                                    propId: column.propId,
                                                    code: column.name,
                                                    name: column.name.$colCodeToPropName(),
                                                    displayName: column.displayName,
                                                    tagSet: column.tagSet,
                                                    primary: column.primary,
                                                    mandatory: column.mandatory,
                                                    domain: column.domainName,
                                                    stdSqlType: column.stdSqlType,
                                                    precision: column.precision,
                                                    scale: column.scale,
                                                    defaultValue: column.defaultValue,
                                                    'ext:dict': getDictName(column.dictName),
                                                    //'ui:control': column.uiControl,
                                                    notGenCode: column.tagSet?.contains('not-gen')
                                                                    || column.tagSet?.contains('del'),
                                                };
                                            ]]></c:script>
                                            <column xpl:attrs="columnAttrs" />
                                        </c:for>
                                    </columns>
                                    <relations>
                                        <c:for var="relation" items="${entity.relations}">
                                            <c:script><![CDATA[
                                                const target = relation.target;
                                                const refEntityName = target.name;//target.className || target.name;

                                                const relationAttrs = {
                                                    //displayName: relation.displayName,
                                                    name: relation.sourcePropName,
                                                    tagSet: relation.tagSet,
                                                    refEntityName: refEntityName.$fullClassName(moduleEntityPackageName),
                                                    refPropName: relation.targetPropName,
                                                    //'ui:control': relation.uiControl,
                                                };
                                            ]]></c:script>
                                            <relation xpl:is="${relation.type}" xpl:attrs="relationAttrs">
                                                <join>
                                                    <c:for var="cond" items="${relation.joinOnConds}">
                                                        <c:script><![CDATA[
                                                            const leftProp = cond.leftProp.$colCodeToPropName();
                                                            const rightProp = cond.rightProp.$colCodeToPropName();
                                                        ]]></c:script>
                                                        <on leftProp="${leftProp}" rightProp="${rightProp}" />
                                                    </c:for>
                                                </join>
                                            </relation>
                                        </c:for>
                                    </relations>
                                    <aliases>
                                        <c:for var="alias" items="${entity.aliases}">
                                            <c:script><![CDATA[
                                                const aliasAttrs = {
                                                    ...alias,
                                                    notGenCode: alias.tagSet?.contains('not-gen')
                                                                    || alias.tagSet?.contains('del'),
                                                };
                                            ]]></c:script>
                                            <alias xpl:attrs="aliasAttrs" />
                                        </c:for>
                                    </aliases>
                                    <unique-keys>
                                        <c:for var="uk" items="${entity.uniqueKeys}">
                                            <c:script><![CDATA[
                                                import java.util.Comparator;

                                                const columns = uk.$toCsvSet().map(col => col.$colCodeToPropName());
                                                columns.sort(Comparator.naturalOrder());

                                                const ukName = columns.join('_');
                                                const ukAttrs = {
                                                    name: 'key_' + ukName,
                                                    columns: columns.join(','),
                                                    constraint: 'UK_' + ukName.toUpperCase(),
                                                };
                                            ]]></c:script>
                                            <unique-key xpl:attrs="ukAttrs" />
                                        </c:for>
                                    </unique-keys>
                                </entity>
                            </c:for>
                        </entities>
                    </orm>
                </thisLib:_DoGenOrmModel>
            </source>
        </GenOrmModel>

        <!-- 根据 XDsl 节点生成 io.nop.orm.model.OrmModel -->
        <_DoGenOrmModel outputMode="none">
            <attr name="xdefPath" type="String" />

            <slot name="default" outputMode="node" />

            <source>
                <c:script><![CDATA[
                    import io.nop.xlang.xdsl.DslModelHelper;

                    const ormNode = eval_node(slot_default).child(0);
                    // Note: DslNodeLoader#loadFromNode 要求节点上必须指定 schema 元模型
                    ormNode.setAttr('x:schema', xdefPath);

                    logInfo('gen.orm-model.xml={}', ormNode.xml());

                    return DslModelHelper.parseDslModelNode(xdefPath, ormNode);
                ]]></c:script>
            </source>
        </_DoGenOrmModel>

        <_DoMergeOrmDicts outputMode="none">
            <attr name="devApp" type="io.crazydan.duzhou.platform.app_modeler.orm.entity.DevApp" />
            <attr name="ormModel" type="io.nop.orm.model.OrmModel" />

            <source>
                <c:script><![CDATA[
                    import io.crazydan.duzhou.platform.app_modeler.orm.entity.DevAppDict;

                    const appDicts = {};
                    devApp.dicts.forEach(dict => {
                        appDicts[dict.name] = dict;
                    });

                    ormModel.getDicts()?.forEach(ormDict => {
                        const name = ormDict.name.$lastPart('/', false);
                        const appDict = appDicts[name] || new DevAppDict();
                        devApp.dicts.add(appDict);

                        appDict.name = name;
                        appDict.displayName = ormDict.label;
                        appDict.optionType = ormDict.valueType;

                        appDict.options = ormDict.options?.map(option => ({
                            code: option.code,
                            label: option.label,
                            value: option.value,
                            description: option.description,
                        }));
                    });
                ]]></c:script>
            </source>
        </_DoMergeOrmDicts>

        <_DoMergeOrmDomains outputMode="none">
            <attr name="devApp" type="io.crazydan.duzhou.platform.app_modeler.orm.entity.DevApp" />
            <attr name="ormModel" type="io.nop.orm.model.OrmModel" />

            <source>
                <c:script><![CDATA[
                    import io.crazydan.duzhou.platform.app_modeler.orm.entity.DevAppDomain;

                    const appDomains = {};
                    devApp.domains.forEach(domain => {
                        appDomains[domain.name] = domain;
                    });

                    ormModel.getDomains()?.forEach(ormDomain => {
                        const name = ormDomain.name;
                        const appDomain = appDomains[name] || new DevAppDomain();
                        devApp.domains.add(appDomain);

                        appDomain.name = name;
                        appDomain.displayName = ormDomain.displayName || name;
                        appDomain.stdDomain = ormDomain.stdDomain;
                        appDomain.stdSqlType = ormDomain.stdSqlType?.getName();
                        appDomain.precision = ormDomain.precision;
                        appDomain.scale = ormDomain.scale;
                    });
                ]]></c:script>
            </source>
        </_DoMergeOrmDomains>

        <_DoMergeOrmEntities outputMode="none">
            <attr name="devAppModule" type="io.crazydan.duzhou.platform.app_modeler.orm.entity.DevAppModule" />
            <attr name="ormModel" type="io.nop.orm.model.OrmModel" />

            <source>
                <c:script><![CDATA[
                    import io.crazydan.duzhou.platform.app_modeler.orm.entity.DevAppEntity;

                    const entityPackagePrefix = ormModel['ext:entityPackageName'] + '.';

                    const appEntities = {};
                    devAppModule.entities.forEach(entity => {
                        appEntities[entity.name] = entity;
                    });

                    // 预添加 entity 以便于在创建 relation 时能与 target entity 关联
                    ormModel.entities?.forEach(ormEntity => {
                        const ormEntityName = ormEntity.name.$removeStart(entityPackagePrefix);
                        if (!appEntities[ormEntityName]) {
                            appEntities[ormEntityName] = new DevAppEntity();
                        }
                    });
                ]]></c:script>
                <c:for var="ormEntity" items="${ormModel.entities}">
                    <c:script><![CDATA[
                        const ormEntityName = ormEntity.name.$removeStart(entityPackagePrefix);
                        const appEntity = appEntities[ormEntityName];

                        devAppModule.entities.add(appEntity);
                    ]]></c:script>
                    <thisLib:_DoMergeOrmEntity
                            devAppModule="${devAppModule}"
                            ormModel="${ormModel}"
                            appEntities="${appEntities}"
                            entityPackagePrefix="${entityPackagePrefix}"
                            appEntity="${appEntity}"
                            ormEntity="${ormEntity}" />
                </c:for>
            </source>
        </_DoMergeOrmEntities>

        <_DoMergeOrmEntity outputMode="none">
            <attr name="devAppModule" type="io.crazydan.duzhou.platform.app_modeler.orm.entity.DevAppModule" />
            <attr name="ormModel" type="io.nop.orm.model.OrmModel" />
            <attr name="appEntities" />
            <attr name="entityPackagePrefix" />
            <attr name="appEntity" />
            <attr name="ormEntity" />

            <source>
                <c:script><![CDATA[
                    import io.crazydan.duzhou.platform.app_modeler.orm.entity.DevAppEntityColumn;
                    import io.crazydan.duzhou.platform.app_modeler.orm.entity.DevAppEntityRelation;

                    appEntity.name = ormEntity.name.$removeStart(entityPackagePrefix);
                    appEntity.tableName = ormEntity.tableName;
                    appEntity.displayName = ormEntity.displayName;
                    appEntity.tagSet = ormEntity.tagSet?.join(',');
                    //appEntity.className = ormEntity.className.$removeStart(entityPackagePrefix);
                    //appEntity.baseClassName = ormEntity['ext:baseClass'].$removeStart(entityPackagePrefix);

                    const appEntityColumns = {};
                    appEntity.columns.forEach(column => {
                        appEntityColumns[column.propId] = column;
                    });

                    const columnNameCodeMap = {};
                    ormEntity.columns?.forEach(ormColumn => {
                        const propId = ormColumn.propId;
                        const appColumn = appEntityColumns[propId] || new DevAppEntityColumn();
                        appEntity.columns.add(appColumn);

                        columnNameCodeMap[ormColumn.name] = ormColumn.code;

                        appColumn.propId = propId;
                        appColumn.name = ormColumn.code;
                        appColumn.displayName = ormColumn.displayName;
                        appColumn.tagSet = ormColumn.tagSet?.join(',');
                        appColumn.primary = ormColumn.primary;
                        appColumn.mandatory = ormColumn.mandatory;
                        appColumn.domainName = ormColumn.domain;
                        appColumn.dictName = ormColumn['ext:dict']?.$lastPart('/', false);
                        //appColumn.uiControl = ormColumn['ui:control'];
                        appColumn.stdSqlType = ormColumn.stdSqlType?.getName() || 'VARCHAR';
                        appColumn.precision = ormColumn.precision;
                        appColumn.scale = ormColumn.scale;
                        appColumn.defaultValue = ormColumn.defaultValue;
                    });

                    const appEntityRelations = {};
                    appEntity.relations.forEach(relation => {
                        appEntityRelations[relation.sourcePropName] = relation;
                    });

                    // 仅需保留 to-one 一方的关联
                    ormEntity.toOneRelations?.forEach(ormRelation => {
                        const sourcePropName = ormRelation.name;
                        const targetPropName = ormRelation.refPropName;
                        const appRelation = appEntityRelations[sourcePropName] || new DevAppEntityRelation();
                        appEntity.relations.add(appRelation);

                        appRelation.type = ormRelation.oneToOne ? 'to-one' : 'to-many';
                        appRelation.source = appEntity;
                        appRelation.target = appEntities[ormRelation.refEntityName.$removeStart(entityPackagePrefix)];

                        //appRelation.displayName = ormRelation.displayName;
                        appRelation.tagSet = ormRelation.tagSet?.join(',');
                        appRelation.sourcePropName = sourcePropName;
                        appRelation.targetPropName = targetPropName;
                        //appRelation.uiControl = ormRelation['ui:control'];

                        appRelation.joinOnConds =
                            ormRelation.getJoin()?.map(ormJoin => ({
                                leftProp: columnNameCodeMap[ormJoin.leftProp],
                                rightProp: columnNameCodeMap[ormJoin.rightProp],
                            }));
                    });

                    appEntity.aliases =
                        ormEntity.aliases?.filter(
                                // 忽略 json 扩展别名
                                alias => alias.name + 'JsonTextComponent.data' != alias.propPath
                            )
                            .map(alias => ({
                                name: alias.name,
                                type: alias.type?.getTypeName() || 'String',
                                displayName: alias.displayName,
                                propPath: alias.propPath,
                                tagSet: alias.tagSet?.join(','),
                            }));

                    appEntity.uniqueKeys =
                        ormEntity.uniqueKeys?.map(
                            uk => uk.columns.map(name => columnNameCodeMap[name]).join(',')
                        );
                ]]></c:script>
            </source>
        </_DoMergeOrmEntity>
    </tags>
</lib>
